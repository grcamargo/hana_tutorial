'use strict';

var Cache = require('lru-cache');
var debug = require('debug')('instance-manager');

var userInput = require('./user-input');
var INSTANCE = require('./instance-manager/constants').STATUS.INSTANCE;
var InstanceManager = require('./instance-manager/Backend');
var ServiceManager = require('./service-manager/Backend');

module.exports = Manager;

function Manager(options) {
  var opts = userInput.processMainOptions(options);
  this._backend = opts.sm_url ? new ServiceManager(opts) : new InstanceManager(opts);
  this._cache = new Cache({ max: opts.cache_max_items, maxAge: (opts.cache_item_expire_seconds * 1000) });
}

Manager.prototype.init = function (callback) {
  this._backend.init(callback);
};

Manager.prototype.create = function (tenant, arg2, arg3) {
  var callback = arg3 || arg2;
  var optionalParameters = arg3 ? arg2 : null;

  tenant = userInput.processTenant(tenant);
  optionalParameters = userInput.processOptionalParameters(optionalParameters);

  var self = this;
  this._backend.create(tenant, optionalParameters, function(err, instance) {
    if (err) {
      return callback(err);
    }

    self._cache.set(instance.tenant_id, instance);
    callback(null, instance);
  });
};

Manager.prototype.get = function (tenant, callback) {
  tenant = userInput.processTenant(tenant);

  if (this._cache.has(tenant)) {
    debug("Getting instance for tenant '%s' from cache", tenant);
    var instance = this._cache.get(tenant);
    return process.nextTick(function () { callback(null, instance); });
  }

  this._backend.get(tenant, callback);
};

Manager.prototype.getAll = function (callback) {
  var self = this;
  this._backend.getAll(function (err, instances) {
    if (err) {
      return callback(err);
    }

    refreshCache(self._cache, instances);

    callback(null, instances);
  });
};

Manager.prototype.delete = function (tenant, callback) {
  tenant = userInput.processTenant(tenant);

  var self = this;
  this._backend.delete(tenant, function (err) {
    if (err) {
      return callback(err);
    }

    self._cache.del(tenant);
    callback();
  });
};

function refreshCache(cache, instances) {
  cache.reset();
  instances.filter(function (instance) {
    return instance.status === INSTANCE.CREATED;
  }).forEach(function (instance) {
    cache.set(instance.tenant_id, instance);
  });
}
