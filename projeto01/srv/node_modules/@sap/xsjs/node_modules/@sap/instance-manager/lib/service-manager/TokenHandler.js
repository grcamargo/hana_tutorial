'use strict';

var format = require('util').format;
var request = require('request');
var debug = require('debug')('instance-manager');

var HTTP = require('./constants').STATUS.HTTP;
var MIN_TOKEN_VALIDITY_SECONDS = require('./constants').MIN_TOKEN_VALIDITY_SECONDS;
var safeParse = require('../utils').safeJsonParse;

module.exports = TokenHandler;

var MILLISECOND = 1;
var SECOND = 1000 * MILLISECOND;

function TokenHandler(options) {
  this._options = options;
  this._cached = null;
}

TokenHandler.prototype.getToken = function (cb) {
  if (this._cached) {
    if (this._cached.expiryTime - Date.now() > MIN_TOKEN_VALIDITY_SECONDS * SECOND) {
      return cb(null, this._cached.token);
    }
  }

  var self = this;
  request({
    method: 'GET',
    baseUrl: this._options.url,
    uri: '/oauth/token',
    qs: { 'grant_type': 'client_credentials' },
    auth: { username: this._options.clientid, password: this._options.clientsecret }
  }, (err, res, body) => {
    if (err) {
      return cb(err);
    }

    if (res.statusCode !== HTTP.OK) {
      var error = new Error(format('Status %d received while getting access token, body: %s', res.statusCode, body));
      error.statusCode = res.statusCode;
      return cb(error);
    }

    var parseResult = safeParse(body);
    if (parseResult.err) {
      debug('Response for getting an access token does not represent a valid JSON, body: %s', body);
      return cb(parseResult.err);
    }


    self._cached = {
      token: parseResult.data.access_token,
      expiryTime: Date.now() + (parseResult.data.expires_in * SECOND)
    };

    cb(null, parseResult.data.access_token);
  });
};
